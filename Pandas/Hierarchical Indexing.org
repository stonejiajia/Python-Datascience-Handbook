
#+TITLE:Hierarchical Indexing

* A Multiply Indexed Series

#+BEGIN_SRC ipython :session :exports both  
  import matplotlib.pyplot as plt
  %matplotlib inline
  import pandas as pd
  import numpy as np
  import seaborn as sns

  index = [('California', 2000), ('California', 2010),
           ('New York', 2000), ('New York', 2010),
           ('Texas', 2000), ('Texas', 2010)]
  populations = [33871648, 37253956,
                 18976457, 19378102,
                 20851820, 25145561]
  pop = pd.Series(populations, index=index)
  pop
#+END_SRC

#+RESULTS:
: (California, 2000)    33871648
: (California, 2010)    37253956
: (New York, 2000)      18976457
: (New York, 2010)      19378102
: (Texas, 2000)         20851820
: (Texas, 2010)         25145561
: dtype: int64

#+BEGIN_SRC ipython :session :exports both  
  pop[('California', 2010):('Texas', 2000)]
#+END_SRC

#+RESULTS:
: (California, 2010)    37253956
: (New York, 2000)      18976457
: (New York, 2010)      19378102
: (Texas, 2000)         20851820
: dtype: int64

#+BEGIN_SRC ipython :session :exports both  
  pop[[i for i in pop.index if i[1] == 2010]]
#+END_SRC

#+RESULTS:
: (California, 2010)    37253956
: (New York, 2010)      19378102
: (Texas, 2010)         25145561
: dtype: int64


* The Better Way: Pandas MultiIndex

#+BEGIN_SRC ipython :session :exports both  
  index = pd.MultiIndex.from_tuples(index)
  index
#+END_SRC

#+RESULTS:
: MultiIndex(levels=[['California', 'New York', 'Texas'], [2000, 2010]],
:            labels=[[0, 0, 1, 1, 2, 2], [0, 1, 0, 1, 0, 1]])

#+BEGIN_SRC ipython :session :exports both  
  pop = pop.reindex(index)
  pop
#+END_SRC

#+RESULTS:
: California  2000    33871648
:             2010    37253956
: New York    2000    18976457
:             2010    19378102
: Texas       2000    20851820
:             2010    25145561
: dtype: int64


#+BEGIN_SRC ipython :session :exports both  
pop[:, 2010]
#+END_SRC

#+RESULTS:
: California    37253956
: New York      19378102
: Texas         25145561
: dtype: int64

#+BEGIN_SRC ipython :session :exports both  
  pop_df = pop.unstack()
  pop_df
#+END_SRC

#+RESULTS:
:                 2000      2010
: California  33871648  37253956
: New York    18976457  19378102
: Texas       20851820  25145561

#+BEGIN_SRC ipython :session :exports both  
  pop_df.stack()
#+END_SRC

#+RESULTS:
: California  2000    33871648
:             2010    37253956
: New York    2000    18976457
:             2010    19378102
: Texas       2000    20851820
:             2010    25145561
: dtype: int64

#+BEGIN_SRC ipython :session :exports both  
pop_df = pd.DataFrame({'total': pop,
                       'under18': [9267089, 9284094,
                                   4687374, 4318033,
                                   5906301, 6879014]})
pop_df
#+END_SRC

#+RESULTS:
:                     total  under18
: California 2000  33871648  9267089
:            2010  37253956  9284094
: New York   2000  18976457  4687374
:            2010  19378102  4318033
: Texas      2000  20851820  5906301
:            2010  25145561  6879014

#+BEGIN_SRC ipython :session :exports both  
  f_u18 = pop_df['under18'] / pop_df['total']
  f_u18.unstack()
#+END_SRC

#+RESULTS:
:                 2000      2010
: California  0.273594  0.249211
: New York    0.247010  0.222831
: Texas       0.283251  0.273568

* Methods of MultiIndex Creation
#+BEGIN_SRC ipython :session :exports both  
  df = pd.DataFrame(np.random.rand(4, 2),
                    index=[['a', 'a', 'b', 'b'], [1, 2, 1, 2]],
                    columns=['data1', 'data2'])
  df
#+END_SRC

#+RESULTS:
:         data1     data2
: a 1  0.633530  0.535775
:   2  0.090290  0.835302
: b 1  0.320780  0.186519
:   2  0.040775  0.590893

#+BEGIN_SRC ipython :session :exports both  
  data = {('California', 2000): 33871648,
          ('California', 2010): 37253956,
          ('Texas', 2000): 20851820,
          ('Texas', 2010): 25145561,
          ('New York', 2000): 18976457,
          ('New York', 2010): 19378102}
  pd.Series(data)
#+END_SRC

#+RESULTS:
: California  2000    33871648
:             2010    37253956
: New York    2000    18976457
:             2010    19378102
: Texas       2000    20851820
:             2010    25145561
: dtype: int64

** Explicit MultiIndex Constructors

#+BEGIN_SRC ipython :session :exports both  
  pd.MultiIndex.from_arrays([['a', 'a', 'b', 'b'], [1, 2, 1, 2]])
#+END_SRC

#+RESULTS:
: MultiIndex(levels=[['a', 'b'], [1, 2]],
:            labels=[[0, 0, 1, 1], [0, 1, 0, 1]])

#+BEGIN_SRC ipython :session :exports both  
pd.MultiIndex.from_tuples([('a', 1), ('a', 2), ('b', 1), ('b', 2)])
#+END_SRC

#+RESULTS:
: MultiIndex(levels=[['a', 'b'], [1, 2]],
:            labels=[[0, 0, 1, 1], [0, 1, 0, 1]])


#+BEGIN_SRC ipython :session :exports both  
pd.MultiIndex.from_product([['a', 'b'], [1, 2, 3, 5]])
#+END_SRC

#+RESULTS:
: MultiIndex(levels=[['a', 'b'], [1, 2, 3, 5]],
:            labels=[[0, 0, 0, 0, 1, 1, 1, 1], [0, 1, 2, 3, 0, 1, 2, 3]])


** Multilindex level names
#+BEGIN_SRC ipython :session :exports both  
  pop.index.names = ['state', 'year']
  pop
#+END_SRC

#+RESULTS:
: state       year
: California  2000    33871648
:             2010    37253956
: New York    2000    18976457
:             2010    19378102
: Texas       2000    20851820
:             2010    25145561
: dtype: int64

** Multilindex for columns
#+BEGIN_SRC ipython :session :exports both  
# hierarchical indices and columns
index = pd.MultiIndex.from_product([[2013, 2014], [1, 2]],
                                   names=['year', 'visit'])
columns = pd.MultiIndex.from_product([['Bob', 'Guido', 'Sue'], ['HR', 'Temp']],
                                     names=['subject', 'type'])

# mock some data
data = np.round(np.random.randn(4, 6), 1)
data[:, ::2] *= 10
data += 37

# create the DataFrame
health_data = pd.DataFrame(data, index=index, columns=columns)
health_data
#+END_SRC

#+RESULTS:
: subject      Bob       Guido         Sue      
: type          HR  Temp    HR  Temp    HR  Temp
: year visit                                    
: 2013 1      21.0  37.1  26.0  37.5  28.0  38.5
:      2      29.0  36.7  45.0  35.8  39.0  38.3
: 2014 1      21.0  37.2  40.0  37.8  25.0  35.7
:      2      42.0  37.3  40.0  37.3  30.0  37.2


#+BEGIN_SRC ipython :session :exports both  
health_data['Guido']
#+END_SRC

#+RESULTS:
: type          HR  Temp
: year visit            
: 2013 1      26.0  37.5
:      2      45.0  35.8
: 2014 1      40.0  37.8
:      2      40.0  37.3


#+BEGIN_SRC ipython :session :exports both  

#+END_SRC
|      | subject | Guido |  Sue |      |  Bob |      |      |
|------+---------+-------+------+------+------+------+------|
|      |    type |  Temp | Temp |   HR |   HR |   HR | Temp |
|------+---------+-------+------+------+------+------+------|
| year |   visit |       |      |      |      |      |      |
|------+---------+-------+------+------+------+------+------|
| 2013 |       1 |  37.5 | 37.1 | 28.0 | 21.0 | 26.0 | 38.5 |
|    2 |    29.0 |  39.0 | 45.0 | 38.3 | 36.7 | 35.8 |      |
| 2014 |       1 |  37.8 | 37.2 | 25.0 | 21.0 | 40.0 | 35.7 |
|    2 |    42.0 |  30.0 | 40.0 | 37.2 | 37.3 | 37.3 |      |
|------+---------+-------+------+------+------+------+------|


* Indexing and Slicing a MultiIndex
** Multiply indexed Series
#+BEGIN_SRC ipython :session :exports both  
pop
#+END_SRC

#+RESULTS:
: state       year
: California  2000    33871648
:             2010    37253956
: New York    2000    18976457
:             2010    19378102
: Texas       2000    20851820
:             2010    25145561
: dtype: int64

#+BEGIN_SRC ipython :session :exports both  
pop['California', 2000]
#+END_SRC

#+RESULTS:
: 33871648

#+BEGIN_SRC ipython :session :exports both  
pop['California']
#+END_SRC

#+RESULTS:
: year
: 2000    33871648
: 2010    37253956
: dtype: int64

#+BEGIN_SRC ipython :session :exports both  
pop.loc['California' : 'New York']
#+END_SRC

#+RESULTS:
: state       year
: California  2000    33871648
:             2010    37253956
: New York    2000    18976457
:             2010    19378102
: dtype: int64

#+BEGIN_SRC ipython :session :exports both  
pop[:, 2000]
#+END_SRC

#+RESULTS:
: state
: California    33871648
: New York      18976457
: Texas         20851820
: dtype: int64

#+BEGIN_SRC ipython :session :exports both  
pop[pop > 22000000]
#+END_SRC

#+RESULTS:
: state       year
: California  2000    33871648
:             2010    37253956
: Texas       2010    25145561
: dtype: int64

#+BEGIN_SRC ipython :session :exports both  
pop[['California', 'Texas']]
#+END_SRC

#+RESULTS:
: state       year
: California  2000    33871648
:             2010    37253956
: Texas       2000    20851820
:             2010    25145561
: dtype: int64

** Multiply indexed DataFrames
#+BEGIN_SRC ipython :session :exports both  
health_data
#+END_SRC

#+RESULTS:
: subject      Bob       Guido         Sue      
: type          HR  Temp    HR  Temp    HR  Temp
: year visit                                    
: 2013 1      21.0  37.1  26.0  37.5  28.0  38.5
:      2      29.0  36.7  45.0  35.8  39.0  38.3
: 2014 1      21.0  37.2  40.0  37.8  25.0  35.7
:      2      42.0  37.3  40.0  37.3  30.0  37.2

#+BEGIN_SRC ipython :session :exports both  
health_data['Guido', 'HR']
#+END_SRC

#+RESULTS:
: year  visit
: 2013  1        26.0
:       2        45.0
: 2014  1        40.0
:       2        40.0
: Name: (Guido, HR), dtype: float64

#+BEGIN_SRC ipython :session :exports both  
health_data.iloc[:2, :2]
#+END_SRC

#+RESULTS:
: subject      Bob      
: type          HR  Temp
: year visit            
: 2013 1      21.0  37.1
:      2      29.0  36.7

#+BEGIN_SRC ipython :session :exports both  
health_data.loc[:, ('Bob', 'HR')]
#+END_SRC

#+RESULTS:
: year  visit
: 2013  1        21.0
:       2        29.0
: 2014  1        21.0
:       2        42.0
: Name: (Bob, HR), dtype: float64

#+BEGIN_SRC ipython :session :exports both  
idx = pd.IndexSlice
health_data.loc[idx[:, 1], idx[:, 'HR']]
#+END_SRC

#+RESULTS:
: subject      Bob Guido   Sue
: type          HR    HR    HR
: year visit                  
: 2013 1      21.0  26.0  28.0
: 2014 1      21.0  40.0  25.0

* Rearranging Multi-indices
** Sorted and unsorted indices
#+BEGIN_SRC ipython :session :exports both  
  import matplotlib.pyplot as plt
  %matplotlib inline
  import pandas as pd
  import numpy as np
  import seaborn as sns

  index = pd.MultiIndex.from_product([['a', 'c', 'b'], [1, 2]])
  data = pd.Series(np.random.rand(6), index=index)
  data.index.names = ['char', 'int']
  data
#+END_SRC

#+RESULTS:
: char  int
: a     1      0.161629
:       2      0.898554
: c     1      0.606429
:       2      0.009197
: b     1      0.101472
:       2      0.663502
: dtype: float64

#+BEGIN_SRC ipython :session :exports both  
  try:
      data['a':'b']
  except KeyError as e:
      print(type(e))
      print(e)
#+END_SRC

#+RESULTS:

#+BEGIN_SRC ipython :session :exports both  
data = data.sort_index()
data
#+END_SRC

#+RESULTS:
: char  int
: a     1      0.161629
:       2      0.898554
: b     1      0.101472
:       2      0.663502
: c     1      0.606429
:       2      0.009197
: dtype: float64

#+BEGIN_SRC ipython :session :exports both  
data['a':'b']
#+END_SRC

#+RESULTS:
: char  int
: a     1      0.161629
:       2      0.898554
: b     1      0.101472
:       2      0.663502
: dtype: float64

** Stacking and unstacking indices
#+BEGIN_SRC ipython :session :exports both  
pop.unstack(level=0)
#+END_SRC

#+RESULTS:
: state  California  New York     Texas
: year                                 
: 2000     33871648  18976457  20851820
: 2010     37253956  19378102  25145561

#+BEGIN_SRC ipython :session :exports both  
pop.unstack(level=1)
#+END_SRC

#+RESULTS:
: year            2000      2010
: state                         
: California  33871648  37253956
: New York    18976457  19378102
: Texas       20851820  25145561

#+BEGIN_SRC ipython :session :exports both  
pop.unstack().stack()
#+END_SRC

#+RESULTS:
: state       year
: California  2000    33871648
:             2010    37253956
: New York    2000    18976457
:             2010    19378102
: Texas       2000    20851820
:             2010    25145561
: dtype: int64

** Index setting and resetting
#+BEGIN_SRC ipython :session :exports both  
pop_flat = pop.reset_index(name='population')
pop_flat
#+END_SRC

#+RESULTS:
:         state  year  population
: 0  California  2000    33871648
: 1  California  2010    37253956
: 2    New York  2000    18976457
: 3    New York  2010    19378102
: 4       Texas  2000    20851820
: 5       Texas  2010    25145561

#+BEGIN_SRC ipython :session :exports both  
pop_flat.set_index(['state', 'year'])

#+END_SRC

#+RESULTS:
:                  population
: state      year            
: California 2000    33871648
:            2010    37253956
: New York   2000    18976457
:            2010    19378102
: Texas      2000    20851820
:            2010    25145561

* Data Affregations on Multi-Indices
#+BEGIN_SRC ipython :session :exports both  
health_data
#+END_SRC

#+RESULTS:
: subject      Bob       Guido         Sue      
: type          HR  Temp    HR  Temp    HR  Temp
: year visit                                    
: 2013 1      21.0  37.1  26.0  37.5  28.0  38.5
:      2      29.0  36.7  45.0  35.8  39.0  38.3
: 2014 1      21.0  37.2  40.0  37.8  25.0  35.7
:      2      42.0  37.3  40.0  37.3  30.0  37.2

#+BEGIN_SRC ipython :session :exports both  
data_mean = health_data.mean(level='year')
data_mean
#+END_SRC

#+RESULTS:
: subject   Bob        Guido          Sue       
: type       HR   Temp    HR   Temp    HR   Temp
: year                                          
: 2013     25.0  36.90  35.5  36.65  33.5  38.40
: 2014     31.5  37.25  40.0  37.55  27.5  36.45

#+BEGIN_SRC ipython :session :exports both  
data_mean.mean(axis=1, level='type')
#+END_SRC

#+RESULTS:
: type         HR       Temp
: year                      
: 2013  31.333333  37.316667
: 2014  33.000000  37.083333
