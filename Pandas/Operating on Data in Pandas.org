
#+TITLE:Operating on Data in Pandas

* Ufuncs: Index Presevation
#+BEGIN_SRC ipython :session :exports both  
  import matplotlib.pyplot as plt
  %matplotlib inline
  import pandas as pd
  import numpy as np
  import seaborn as sns
  from tabulate import tabulate




  rng = np.random.RandomState(42)
  ser = pd.Series(rng.randint(0, 10, 4))
  ser

#+END_SRC

#+RESULTS:
: 0    6
: 1    3
: 2    7
: 3    4
: dtype: int64

#+BEGIN_SRC ipython :session :results output :exports both  
  df = pd.DataFrame(rng.randint(0, 10, (3, 4)),
                    columns=['A', 'B', 'C', 'D'])
  
  print(tabulate(df, headers="keys", tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
: |    |   A |   B |   C |   D |
: |----+-----+-----+-----+-----|
: |  0 |   8 |   7 |   1 |   0 |
: |  1 |   6 |   6 |   7 |   4 |
: |  2 |   2 |   7 |   5 |   2 |



#+BEGIN_SRC ipython :session :results output :exports both  
  np.exp(df)
  
  print(tabulate(np.exp(df), headers="keys", tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
: |    |         A |       B |         C |          D |
: |----+-----------+---------+-----------+------------|
: |  0 |   7.38906 |    1    | 1096.63   |    7.38906 |
: |  1 |   7.38906 |    1    |   54.5982 | 8103.08    |
: |  2 | 403.429   | 8103.08 | 2980.96   |  403.429   |

#+BEGIN_SRC ipython :session :results output :exports both  
np.sin(df * np.pi / 4)

print(tabulate(np.sin(df * np.pi / 4), headers="keys", tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
: |    |            A |         B |            C |           D |
: |----+--------------+-----------+--------------+-------------|
: |  0 | -1           |  0.707107 | -2.44929e-16 | 1           |
: |  1 |  1.22465e-16 |  1        | -1           | 1.22465e-16 |
: |  2 | -2.44929e-16 | -1        |  0.707107    | 0.707107    |

* UFuncs: Index Alignment

#+BEGIN_SRC ipython :session :exports both  
area = pd.Series({'Alaska': 1723337, 'Texas': 695662,
                  'California': 423967}, name='area')
population = pd.Series({'California': 38332521, 'Texas': 26448193,
                        'New York': 19651127}, name='population')
#+END_SRC

#+RESULTS:

#+BEGIN_SRC ipython :session :exports both  
population / area

#+END_SRC

#+RESULTS:
: Alaska              NaN
: California    90.413926
: New York            NaN
: Texas         38.018740
: dtype: float64

#+BEGIN_SRC ipython :session :exports both  
area.index | population.index
#+END_SRC

#+RESULTS:
: Index(['Alaska', 'California', 'New York', 'Texas'], dtype='object')

#+BEGIN_SRC ipython :session :exports both  
  A = pd.Series([2, 4, 6], index=[0, 1, 2])
  B = pd.Series([1, 3, 5], index=[1, 2, 3])
  A + B
#+END_SRC

#+RESULTS:
: 0    NaN
: 1    5.0
: 2    9.0
: 3    NaN
: dtype: float64

#+BEGIN_SRC ipython :session :exports both  
  A.add(B, fill_value=0)
#+END_SRC

#+RESULTS:
: 0    2.0
: 1    5.0
: 2    9.0
: 3    5.0
: dtype: float64

* Index alignment in DataFrame

#+BEGIN_SRC ipython :session :results output :exports both  
  A = pd.DataFrame(rng.randint(0, 20, (2, 2)),
                   columns=list('AB'))

 
  print(tabulate(A, headers="keys", tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
: |    |   A |   B |
: |----+-----+-----|
: |  0 |  13 |   2 |
: |  1 |   0 |   4 |

#+BEGIN_SRC ipython :session :results output :exports both  
  B = pd.DataFrame(rng.randint(0, 10, (3, 3)),
                   columns=list('BAC'))
  
  print(tabulate(B, headers="keys", tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
: |    |   B |   A |   C |
: |----+-----+-----+-----|
: |  0 |   1 |   9 |   8 |
: |  1 |   4 |   5 |   3 |
: |  2 |   9 |   6 |   8 |

#+BEGIN_SRC ipython :session :results output :exports both  

print(tabulate(A+B, headers="keys", tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
: |    |   A |   B |   C |
: |----+-----+-----+-----|
: |  0 |  22 |   3 | nan |
: |  1 |   5 |   8 | nan |
: |  2 | nan | nan | nan |

#+BEGIN_SRC ipython :session :exports both  
fill = A.stack().mean()
A.pow(B, fill_value=fill)
#+END_SRC

#+RESULTS:
:               A             B             C
: 0  130321.00000  6.975757e+09  1.953125e+03
: 1       1.00000  1.000000e+00  3.814697e+06
: 2  305175.78125  1.562500e+02  2.441406e+04


* Ufuncs: Operation Between DataFrame and Series
#+BEGIN_SRC ipython :session :exports both  
  A = rng.randint(10, size=(3, 4))
  A
#+END_SRC

#+RESULTS:
: array([[4, 4, 0, 0],
:        [2, 9, 3, 4],
:        [1, 7, 1, 8]])

#+BEGIN_SRC ipython :session :exports both  
  A - A[0]
#+END_SRC

#+RESULTS:
: array([[ 0,  0,  0,  0],
:        [-2,  5,  3,  4],
:        [-3,  3,  1,  8]])

#+BEGIN_SRC ipython :session :exports both  
  df = pd.DataFrame(A, columns=list('QRST'))
  df
#+END_SRC

#+RESULTS:
:    Q  R  S  T
: 0  4  4  0  0
: 1  2  9  3  4
: 2  1  7  1  8

#+BEGIN_SRC ipython :session :exports both  
df - df.iloc[0]
#+END_SRC

#+RESULTS:
:    Q  R  S  T
: 0  0  0  0  0
: 1 -2  5  3  4
: 2 -3  3  1  8

#+BEGIN_SRC ipython :session :exports both  
  df.subtract(df['R'], axis=0)
#+END_SRC

#+RESULTS:
:    Q  R  S  T
: 0  0  0 -4 -4
: 1 -7  0 -6 -5
: 2 -6  0 -6  1

#+BEGIN_SRC ipython :session :exports both  
  halfrow = df.iloc[0, ::2]
  halfrow
#+END_SRC

#+RESULTS:
: Q    4
: S    0
: Name: 0, dtype: int64

#+BEGIN_SRC ipython :session :exports both  
  df - halfrow
#+END_SRC

#+RESULTS:
:      Q   R    S   T
: 0  0.0 NaN  0.0 NaN
: 1 -2.0 NaN  3.0 NaN
: 2 -3.0 NaN  1.0 NaN

#+BEGIN_SRC ipython :session :exports both  
  halfrow.keys()
#+END_SRC

#+RESULTS:
: Index(['Q', 'S'], dtype='object')
