
#+TITLE:The Basic of Numpy Arrays

#+BEGIN_SRC ipython :session :exports both  
  import matplotlib.pyplot as plt
  %matplotlib inline
  import pandas as pd
  import numpy as np
  import seaborn as sns

  a = np.array([1, 3, 2, 5, 3])
  a
#+END_SRC

#+RESULTS:
: array([1, 3, 2, 5, 3])



#+BEGIN_SRC ipython :session :exports both  
  np.full((3,3), 3.14)
#+END_SRC

#+RESULTS:
: array([[ 3.14,  3.14,  3.14],
:        [ 3.14,  3.14,  3.14],
:        [ 3.14,  3.14,  3.14]])

#+BEGIN_SRC ipython :session :exports both  
  np.linspace(0, 20, 10, endpoint=False)
  
#+END_SRC

#+RESULTS:
: array([  0.,   2.,   4.,   6.,   8.,  10.,  12.,  14.,  16.,  18.])

#+BEGIN_SRC ipython :session :exports both  
np.linspace(0, 20, 10)
#+END_SRC

#+RESULTS:
: array([  0.        ,   2.22222222,   4.44444444,   6.66666667,
:          8.88888889,  11.11111111,  13.33333333,  15.55555556,
:         17.77777778,  20.        ])


#+BEGIN_SRC ipython :session :exports both  

np.arange(0, 20, 2)
#+END_SRC

#+RESULTS:
: array([ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18])

np.linspace : 步数
np.arange : 开始，结束，之间间隔

#+BEGIN_SRC ipython :session :exports both  
np.eye(3)
#+END_SRC

#+RESULTS:
: array([[ 1.,  0.,  0.],
:        [ 0.,  1.,  0.],
:        [ 0.,  0.,  1.]])

#+BEGIN_SRC ipython :session :exports both  
np.zeros((3,3))
#+END_SRC

#+RESULTS:
: array([[ 0.,  0.,  0.],
:        [ 0.,  0.,  0.],
:        [ 0.,  0.,  0.]])

#+BEGIN_SRC ipython :session  :exports both  
np.random.seed(0)
x1 = np.random.randint(10, size=6)
x2 = np.random.randint(10, size=(3, 4))
x3 = np.random.randint(10, size=(3, 4, 5))
x3
#+END_SRC

#+RESULTS:
#+begin_example
array([[[8, 1, 5, 9, 8],
        [9, 4, 3, 0, 3],
        [5, 0, 2, 3, 8],
        [1, 3, 3, 3, 7]],

       [[0, 1, 9, 9, 0],
        [4, 7, 3, 2, 7],
        [2, 0, 0, 4, 5],
        [5, 6, 8, 4, 1]],

       [[4, 9, 8, 1, 1],
        [7, 9, 9, 3, 6],
        [7, 2, 0, 3, 5],
        [9, 4, 4, 6, 4]]])
#+end_example


#+BEGIN_SRC ipython :session :results output :exports both  
print(x2)
#+END_SRC 

#+RESULTS:
: [[3 5 2 4]
:  [7 6 8 8]
:  [1 6 7 7]]


#+BEGIN_SRC ipython :session :results output :exports both  
grid = np.arange(1, 10).reshape((3,3))
print(grid)
#+END_SRC

#+RESULTS:
: [[1 2 3]
:  [4 5 6]
:  [7 8 9]]

#+BEGIN_SRC ipython :session :exports both  
grid = np.array([[1, 2, 3],
                 [4, 5, 6]])
np.concatenate([grid, grid])
#+END_SRC

#+RESULTS:
: array([[1, 2, 3],
:        [4, 5, 6],
:        [1, 2, 3],
:        [4, 5, 6]])

#+BEGIN_SRC ipython :session :exports both  
np.concatenate([grid, grid], axis=1)
#+END_SRC

#+RESULTS:
: array([[1, 2, 3, 1, 2, 3],
:        [4, 5, 6, 4, 5, 6]])


#+BEGIN_SRC ipython :session :results output :exports both  
x = [1, 2, 3, 99, 99, 3, 2, 1]
x1, x2, x3 = np.split(x, [3, 5])
print(x1, x2, x3)
#+END_SRC

#+RESULTS:
: [1 2 3] [99 99] [3 2 1]

[2, 3] would, for ``axis=0``, result in
ary[:2]
ary[2:3]
ary[3:]
    

#+BEGIN_SRC ipython :session :exports both  
grid = np.arange(16).reshape((4, 4))
grid
#+END_SRC

#+RESULTS:
: array([[ 0,  1,  2,  3],
:        [ 4,  5,  6,  7],
:        [ 8,  9, 10, 11],
:        [12, 13, 14, 15]])

** np.vsplit  和 np.hsplit

#+BEGIN_SRC ipython :session :exports both  :results output
upper , lower = np.vsplit(grid,[1])
print(upper, lower)
#+END_SRC

#+RESULTS:
: [[0 1 2 3]] [[ 4  5  6  7]
:  [ 8  9 10 11]
:  [12 13 14 15]]

