#+TITle:Combining Datasets: Merge and Join


* Categories of Joins

#+BEGIN_SRC ipython :session :results output raw :exports both  
  import matplotlib.pyplot as plt
  %matplotlib inline
  import pandas as pd
  import numpy as np
  import seaborn as sns
  from tabulate import tabulate

  df1 = pd.DataFrame({'employee': ['Bob', 'Jake', 'Lisa', 'Sue'],
                      'group': ['Accounting', 'Engineering', 'Engineering', 'HR']})
  df2 = pd.DataFrame({'employee': ['Lisa', 'Bob', 'Jake', 'Sue'],
                      'hire_date': [2004, 2008, 2012, 2014]})

  
  print(tabulate(df1, headers="keys", tablefmt="orgtbl") + "\n")
  
  print(tabulate(df2, headers="keys", tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
|   | employee | group       |
|---+----------+-------------|
| 0 | Bob      | Accounting  |
| 1 | Jake     | Engineering |
| 2 | Lisa     | Engineering |
| 3 | Sue      | HR          |

|    | employee   |   hire_date |
|----+------------+-------------|
|  0 | Lisa       |        2004 |
|  1 | Bob        |        2008 |
|  2 | Jake       |        2012 |
|  3 | Sue        |        2014 |


#+BEGIN_SRC ipython :session :results output raw :exports both  
df3 = pd.merge(df1, df2)

print(tabulate(df3, headers="keys", tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
|   | employee | group       | hire_date |
|---+----------+-------------+-----------|
| 0 | Bob      | Accounting  |      2008 |
| 1 | Jake     | Engineering |      2012 |
| 2 | Lisa     | Engineering |      2004 |
| 3 | Sue      | HR          |      2014 |

** Many-to-one joins

#+BEGIN_SRC ipython :session :results output raw :exports both  
df4 = pd.DataFrame({'group': ['Accounting', 'Engineering', 'HR'],
                    'supervisor': ['Carly', 'Guido', 'Steve']})

print(tabulate(pd.merge(df3, df4), headers="keys", tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
|   | employee | group       | hire_date | supervisor |
|---+----------+-------------+-----------+------------|
| 0 | Bob      | Accounting  |      2008 | Carly      |
| 1 | Jake     | Engineering |      2012 | Guido      |
| 2 | Lisa     | Engineering |      2004 | Guido      |
| 3 | Sue      | HR          |      2014 | Steve      |



** Many-to-many joins

#+BEGIN_SRC ipython :session :results output raw :exports both  
df5 = pd.DataFrame({'group': ['Accounting', 'Accounting',
                              'Engineering', 'Engineering', 'HR', 'HR'],
                    'skills': ['math', 'spreadsheets', 'coding', 'linux',
                               'spreadsheets', 'organization']})


print(tabulate(df, headers="keys", tablefmt="orgtbl") + "\n")

print(tabulate(pd.merge(df1, df5), headers="keys", tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
|   | Q | R | S | T |
|---+---+---+---+---|
| 0 | 4 | 8 | 6 | 1 |
| 1 | 3 | 8 | 1 | 9 |
| 2 | 8 | 9 | 4 | 1 |

|    | employee   | group       | skills       |
|----+------------+-------------+--------------|
|  0 | Bob        | Accounting  | math         |
|  1 | Bob        | Accounting  | spreadsheets |
|  2 | Jake       | Engineering | coding       |
|  3 | Jake       | Engineering | linux        |
|  4 | Lisa       | Engineering | coding       |
|  5 | Lisa       | Engineering | linux        |
|  6 | Sue        | HR          | spreadsheets |
|  7 | Sue        | HR          | organization |

* Specification of the Merge Key

** The on keyword

#+BEGIN_SRC ipython :session :results output raw :exports both  


print(tabulate(df1, headers="keys", tablefmt="orgtbl") + "\n")


print(tabulate(df2, headers="keys", tablefmt="orgtbl"))

print(tabulate(pd.merge(df1, df2, on='employee'), headers="keys", tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
|   | employee | group       |
|---+----------+-------------|
| 0 | Bob      | Accounting  |
| 1 | Jake     | Engineering |
| 2 | Lisa     | Engineering |
| 3 | Sue      | HR          |

|    | employee   |   hire_date |
|----+------------+-------------|
|  0 | Lisa       |        2004 |
|  1 | Bob        |        2008 |
|  2 | Jake       |        2012 |
|  3 | Sue        |        2014 |


|    | employee   | group       |   hire_date |
|----+------------+-------------+-------------|
|  0 | Bob        | Accounting  |        2008 |
|  1 | Jake       | Engineering |        2012 |
|  2 | Lisa       | Engineering |        2004 |
|  3 | Sue        | HR          |        2014 |

** The left_on and right_on keywords


#+BEGIN_SRC ipython :session :results output raw :exports both  
df3 = pd.DataFrame({'name': ['Bob', 'Jake', 'Lisa', 'Sue'],
                    'salary': [70000, 80000, 120000, 90000]})

print(tabulate(pd.merge(df1, df3, left_on="employee", right_on="name"), headers="keys", tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
|   | employee | group       | name | salary |
|---+----------+-------------+------+--------|
| 0 | Bob      | Accounting  | Bob  |  70000 |
| 1 | Jake     | Engineering | Jake |  80000 |
| 2 | Lisa     | Engineering | Lisa | 120000 |
| 3 | Sue      | HR          | Sue  |  90000 |

#+BEGIN_SRC ipython :session :results output raw :exports both  
pd.merge(df1, df3)
#+END_SRC

>No common columns to perform merge on

#+BEGIN_SRC ipython :session :results output raw :exports both  

print(tabulate(pd.merge(df1, df3, left_on="employee", right_on="name").drop('name', axis=1), headers="keys", tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
|   | employee | group       | salary |
|---+----------+-------------+--------|
| 0 | Bob      | Accounting  |  70000 |
| 1 | Jake     | Engineering |  80000 |
| 2 | Lisa     | Engineering | 120000 |
| 3 | Sue      | HR          |  90000 |

** The left_index and right_index keywords

#+BEGIN_SRC ipython :session :results output raw :exports both  
df1a = df1.set_index('employee')
df2a = df2.set_index('employee')


print(tabulate(df1a, headers="keys", tablefmt="orgtbl") + "\n")

print(tabulate(df2a, headers="keys", tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
| employee | group       |
|----------+-------------|
| Bob      | Accounting  |
| Jake     | Engineering |
| Lisa     | Engineering |
| Sue      | HR          |

| employee   |   hire_date |
|------------+-------------|
| Lisa       |        2004 |
| Bob        |        2008 |
| Jake       |        2012 |
| Sue        |        2014 |

#+BEGIN_SRC ipython :session :results output raw :exports both  


print(tabulate(pd.merge(df1a, df2a, left_index=True, right_index=True), headers="keys", tablefmt="orgtbl") + "\n")


print(tabulate(df1a.join(df2a), headers="keys", tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
| employee | group       | hire_date |
|----------+-------------+-----------|
| Lisa     | Engineering |      2004 |
| Bob      | Accounting  |      2008 |
| Jake     | Engineering |      2012 |
| Sue      | HR          |      2014 |

| employee   | group       |   hire_date |
|------------+-------------+-------------|
| Bob        | Accounting  |        2008 |
| Jake       | Engineering |        2012 |
| Lisa       | Engineering |        2004 |
| Sue        | HR          |        2014 |

* Specifying Set Arithmetic for Joins

#+BEGIN_SRC ipython :session :results output raw :exports both  
df6 = pd.DataFrame({'name': ['Peter', 'Paul', 'Mary'],
                    'food': ['fish', 'beans', 'bread']},
                   columns=['name', 'food'])
df7 = pd.DataFrame({'name': ['Mary', 'Joseph'],
                    'drink': ['wine', 'beer']},
                   columns=['name', 'drink'])

print(tabulate(df6, headers="keys", tablefmt="orgtbl") + "\n")

print(tabulate(df7, headers="keys", tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
|   | name  | food  |
|---+-------+-------|
| 0 | Peter | fish  |
| 1 | Paul  | beans |
| 2 | Mary  | bread |

|    | name   | drink   |
|----+--------+---------|
|  0 | Mary   | wine    |
|  1 | Joseph | beer    |

#+BEGIN_SRC ipython :session :results output raw :exports both  

print(tabulate(pd.merge(df6, df7), headers="keys", tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
|   | name | food  | drink |
|---+------+-------+-------|
| 0 | Mary | bread | wine  |

#+BEGIN_SRC ipython :session :results output raw :exports both  

print(tabulate(pd.merge(df6, df7, how='inner'), headers="keys", tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
|   | name | food  | drink |
|---+------+-------+-------|
| 0 | Mary | bread | wine  |

#+BEGIN_SRC ipython :session :results output raw :exports both  

print(tabulate(pd.merge(df6, df7, how='outer'), headers="keys", tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
|   | name   | food  | drink |
|---+--------+-------+-------|
| 0 | Peter  | fish  | nan   |
| 1 | Paul   | beans | nan   |
| 2 | Mary   | bread | wine  |
| 3 | Joseph | nan   | beer  |

#+BEGIN_SRC ipython :session :results output raw :exports both  

print(tabulate(pd.merge(df6, df7, how='right'), headers="keys", tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
|   | name   | food  | drink |
|---+--------+-------+-------|
| 0 | Mary   | bread | wine  |
| 1 | Joseph | nan   | beer  |

* Overlapping Column Names: The suffixes Keyword

#+BEGIN_SRC ipython :session :results output raw :exports both  
df8 = pd.DataFrame({'name': ['Bob', 'Jake', 'Lisa', 'Sue'],
                    'rank': [1, 2, 3, 4]})
df9 = pd.DataFrame({'name': ['Bob', 'Jake', 'Lisa', 'Sue'],
                    'rank': [3, 1, 4, 2]})

print(tabulate(pd.merge(df8, df9, on="name"), headers="keys", tablefmt="orgtbl") + "\n")


print(tabulate(df8, headers="keys", tablefmt="orgtbl") + "\n")


print(tabulate(df9, headers="keys", tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
|   | name | rank_x | rank_y |
|---+------+--------+--------|
| 0 | Bob  |      1 |      3 |
| 1 | Jake |      2 |      1 |
| 2 | Lisa |      3 |      4 |
| 3 | Sue  |      4 |      2 |

|    | name   |   rank |
|----+--------+--------|
|  0 | Bob    |      1 |
|  1 | Jake   |      2 |
|  2 | Lisa   |      3 |
|  3 | Sue    |      4 |

|    | name   |   rank |
|----+--------+--------|
|  0 | Bob    |      3 |
|  1 | Jake   |      1 |
|  2 | Lisa   |      4 |
|  3 | Sue    |      2 |

#+BEGIN_SRC ipython :session :results output raw :exports both  

print(tabulate(pd.merge(df8, df9, on="name", suffixes=["_L", "_R"]), headers="keys", tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
|   | name | rank_L | rank_R |
|---+------+--------+--------|
| 0 | Bob  |      1 |      3 |
| 1 | Jake |      2 |      1 |
| 2 | Lisa |      3 |      4 |
| 3 | Sue  |      4 |      2 |

* Example

#+BEGIN_SRC ipython :session :results output raw :exports both  
pop = pd.read_csv('state-population.csv')
areas = pd.read_csv('state-areas.csv')
abbrevs = pd.read_csv('state-abbrevs.csv')


print(tabulate(pop.head(), headers="keys", tablefmt="orgtbl") + "\n")

print(tabulate(areas.head(), headers="keys", tablefmt="orgtbl") + "\n")


print(tabulate(abbrevs.head(), headers="keys", tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
|   | state/region | ages    | year |  population |
|---+--------------+---------+------+-------------|
| 0 | AL           | under18 | 2012 | 1.11749e+06 |
| 1 | AL           | total   | 2012 | 4.81753e+06 |
| 2 | AL           | under18 | 2010 | 1.13097e+06 |
| 3 | AL           | total   | 2010 | 4.78557e+06 |
| 4 | AL           | under18 | 2011 | 1.12576e+06 |

|    | state      |   area (sq. mi) |
|----+------------+-----------------|
|  0 | Alabama    |           52423 |
|  1 | Alaska     |          656425 |
|  2 | Arizona    |          114006 |
|  3 | Arkansas   |           53182 |
|  4 | California |          163707 |

|    | state      | abbreviation   |
|----+------------+----------------|
|  0 | Alabama    | AL             |
|  1 | Alaska     | AK             |
|  2 | Arizona    | AZ             |
|  3 | Arkansas   | AR             |
|  4 | California | CA             |


#+BEGIN_SRC ipython :session :results output raw :exports both  
merged = pd.merge(pop, abbrevs, how='outer',
                  left_on='state/region', right_on='abbreviation')
merged = merged.drop('abbreviation', 1) # drop duplicate info

print(tabulate(merged.head(), headers="keys", tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
|   | state/region | ages    | year |  population | state   |
|---+--------------+---------+------+-------------+---------|
| 0 | AL           | under18 | 2012 | 1.11749e+06 | Alabama |
| 1 | AL           | total   | 2012 | 4.81753e+06 | Alabama |
| 2 | AL           | under18 | 2010 | 1.13097e+06 | Alabama |
| 3 | AL           | total   | 2010 | 4.78557e+06 | Alabama |
| 4 | AL           | under18 | 2011 | 1.12576e+06 | Alabama |


#+BEGIN_SRC ipython :session :exports both  
merged.isnull().any()
#+END_SRC

#+RESULTS:
: state/region    False
: ages            False
: year            False
: population       True
: state            True
: dtype: bool

#+BEGIN_SRC ipython :session :results output raw :exports both  

print(tabulate(merged[merged['population'].isnull()].head(), headers="keys", tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
|      | state/region | ages    | year | population | state       |
|------+--------------+---------+------+------------+-------------|
| 2448 | PR           | under18 | 1990 |        nan | Puerto Rico |
| 2449 | PR           | total   | 1990 |        nan | Puerto Rico |
| 2450 | PR           | total   | 1991 |        nan | Puerto Rico |
| 2451 | PR           | under18 | 1991 |        nan | Puerto Rico |
| 2452 | PR           | total   | 1993 |        nan | Puerto Rico |

#+BEGIN_SRC ipython :session :exports both  
merged.loc[merged['state'].isnull(), 'state/region'].unique()
#+END_SRC

#+RESULTS:
: array(['PR', 'USA'], dtype=object)

#+BEGIN_SRC ipython :session :exports both  
merged.loc[merged['state/region'] == 'PR', 'state'] = 'Puerto Rico'
merged.loc[merged['state/region'] == 'USA', 'state'] = 'United States'
merged.isnull().any()
#+END_SRC

#+RESULTS:
: state/region    False
: ages            False
: year            False
: population       True
: state           False
: dtype: bool

#+BEGIN_SRC ipython :session :results output raw :exports both  
final = pd.merge(merged, areas, on='state', how='left')

print(tabulate(final.head(), headers="keys", tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
|   | state/region | ages    | year |  population | state   | area (sq. mi) |
|---+--------------+---------+------+-------------+---------+---------------|
| 0 | AL           | under18 | 2012 | 1.11749e+06 | Alabama |         52423 |
| 1 | AL           | total   | 2012 | 4.81753e+06 | Alabama |         52423 |
| 2 | AL           | under18 | 2010 | 1.13097e+06 | Alabama |         52423 |
| 3 | AL           | total   | 2010 | 4.78557e+06 | Alabama |         52423 |
| 4 | AL           | under18 | 2011 | 1.12576e+06 | Alabama |         52423 |

#+BEGIN_SRC ipython :session :exports both  
final.isnull().any()
#+END_SRC

#+RESULTS:
: state/region     False
: ages             False
: year             False
: population        True
: state            False
: area (sq. mi)     True
: dtype: bool

#+BEGIN_SRC ipython :session :exports both  
final['state'][final['area (sq. mi)'].isnull()].unique()
#+END_SRC

#+RESULTS:
: array(['United States'], dtype=object)

#+BEGIN_SRC ipython :session :results output raw :exports both  
final.dropna(inplace=True)

print(tabulate(final.head(), headers="keys", tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
|   | state/region | ages    | year |  population | state   | area (sq. mi) |
|---+--------------+---------+------+-------------+---------+---------------|
| 0 | AL           | under18 | 2012 | 1.11749e+06 | Alabama |         52423 |
| 1 | AL           | total   | 2012 | 4.81753e+06 | Alabama |         52423 |
| 2 | AL           | under18 | 2010 | 1.13097e+06 | Alabama |         52423 |
| 3 | AL           | total   | 2010 | 4.78557e+06 | Alabama |         52423 |
| 4 | AL           | under18 | 2011 | 1.12576e+06 | Alabama |         52423 |

#+BEGIN_SRC ipython :session :results output raw :exports both  
data2010 = final.query("year == 2010 & ages == 'total'")

print(tabulate(data2010.head(), headers="keys", tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
|     | state/region | ages  | year |  population | state      | area (sq. mi) |
|-----+--------------+-------+------+-------------+------------+---------------|
|   3 | AL           | total | 2010 | 4.78557e+06 | Alabama    |         52423 |
|  91 | AK           | total | 2010 |      713868 | Alaska     |        656425 |
| 101 | AZ           | total | 2010 | 6.40879e+06 | Arizona    |        114006 |
| 189 | AR           | total | 2010 | 2.92228e+06 | Arkansas   |         53182 |
| 197 | CA           | total | 2010 | 3.73336e+07 | California |        163707 |

#+BEGIN_SRC ipython :session :exports both  
density.sort_values(ascending=False, inplace=True)
density.head()
#+END_SRC

#+RESULTS:
: state
: District of Columbia    8898.897059
: Puerto Rico             1058.665149
: New Jersey              1009.253268
: Rhode Island             681.339159
: Connecticut              645.600649
: dtype: float64

#+BEGIN_SRC ipython :session :exports both  
density.tail()
#+END_SRC

#+RESULTS:
: state
: South Dakota    10.583512
: North Dakota     9.537565
: Montana          6.736171
: Wyoming          5.768079
: Alaska           1.087509
: dtype: float64
