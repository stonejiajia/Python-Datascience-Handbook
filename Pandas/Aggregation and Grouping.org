
#+TITLE:Aggregation and Grouping

* Aggregation and Grouping

#+BEGIN_SRC ipython :session :results output raw :exports both  
import matplotlib.pyplot as plt
%matplotlib inline
import pandas as pd
import numpy as np
import seaborn as sns
from tabulate import tabulate


class display(object):
    """Display HTML representation of multiple objects"""
    template = """<div style="float: left; padding: 10px;">
    <p style='font-family:"Courier New", Courier, monospace'>{0}</p>{1}
    </div>"""
    def __init__(self, *args):
        self.args = args

    def _repr_html_(self):
        return '\n'.join(self.template.format(a, eval(a)._repr_html_())
                        for a in self.args)

    def __repr__(self):
        return '\n\n'.join(a + '\n' + repr(eval(a))
                            for a in self.args)
    
#+END_SRC

#+RESULTS:

#+BEGIN_SRC ipython :session :exports both  
import seaborn as sns
planets = sns.load_dataset('planets')
planets.shape

#+END_SRC

#+RESULTS:
| 1035 | 6 |

#+BEGIN_SRC ipython :session :results output raw :exports both  

print(tabulate(planets.head(), headers="keys", tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
|   | method          | number | orbital_period | mass | distance | year |
|---+-----------------+--------+----------------+------+----------+------|
| 0 | Radial Velocity |      1 |          269.3 |  7.1 |     77.4 | 2006 |
| 1 | Radial Velocity |      1 |        874.774 | 2.21 |    56.95 | 2008 |
| 2 | Radial Velocity |      1 |            763 |  2.6 |    19.84 | 2011 |
| 3 | Radial Velocity |      1 |         326.03 | 19.4 |   110.62 | 2007 |
| 4 | Radial Velocity |      1 |         516.22 | 10.5 |   119.47 | 2009 |

* Simple Aggregation in Pandas

#+BEGIN_SRC ipython :session :exports both  
rng = np.random.RandomState(42)
ser = pd.Series(rng.rand(5))
ser
#+END_SRC

#+RESULTS:
: 0    0.374540
: 1    0.950714
: 2    0.731994
: 3    0.598658
: 4    0.156019
: dtype: float64


#+BEGIN_SRC ipython :session :exports both  
ser.sum()
ser.sum()
#+END_SRC

#+RESULTS:
: 2.811925491708157

#+BEGIN_SRC ipython :session :results output raw :exports both  
df = pd.DataFrame({'A': rng.rand(5),
                   'B': rng.rand(5)})
print(tabulate(df, headers="keys", tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
|   |         A |         B |
|---+-----------+-----------|
| 0 |  0.785176 |  0.607545 |
| 1 |  0.199674 |  0.170524 |
| 2 |  0.514234 | 0.0650516 |
| 3 |  0.592415 |  0.948886 |
| 4 | 0.0464504 |  0.965632 |

#+BEGIN_SRC ipython :session :exports both  
df.mean()
#+END_SRC

#+RESULTS:
: A    0.427590
: B    0.551528
: dtype: float64

#+BEGIN_SRC ipython :session :exports both  
  df.mean(axis='columns')
#+END_SRC

#+RESULTS:
: 0    0.696360
: 1    0.185099
: 2    0.289643
: 3    0.770650
: 4    0.506041
: dtype: float64



#+BEGIN_SRC ipython :session :exports both  
planets.dropna().describe()
#+END_SRC

#+RESULTS:
:           number  orbital_period        mass    distance         year
: count  498.00000      498.000000  498.000000  498.000000   498.000000
: mean     1.73494      835.778671    2.509320   52.068213  2007.377510
: std      1.17572     1469.128259    3.636274   46.596041     4.167284
: min      1.00000        1.328300    0.003600    1.350000  1989.000000
: 25%      1.00000       38.272250    0.212500   24.497500  2005.000000
: 50%      1.00000      357.000000    1.245000   39.940000  2009.000000
: 75%      2.00000      999.600000    2.867500   59.332500  2011.000000
: max      6.00000    17337.500000   25.000000  354.000000  2014.000000

* GroupBy: Split, Apply, Combine

#+BEGIN_SRC ipython :session :results output raw :exports both  
  df = pd.DataFrame({'key': ['A', 'B', 'C', 'A', 'B', 'C'],
                     'data': range(6)}, columns=['key', 'data'])

  print(tabulate(df, headers="keys", tablefmt="orgtbl"))

  
#+END_SRC

#+RESULTS:
|   | key | data |
|---+-----+------|
| 0 | A   |    0 |
| 1 | B   |    1 |
| 2 | C   |    2 |
| 3 | A   |    3 |
| 4 | B   |    4 |
| 5 | C   |    5 |

#+BEGIN_SRC ipython :session :results output raw :exports both  

print(tabulate(df.groupby('key').sum(), headers="keys", tablefmt="orgtbl"))

#+END_SRC

#+RESULTS:
| key | data |
|-----+------|
| A   |    3 |
| B   |    5 |
| C   |    7 |

* The GroupBy object

#+BEGIN_SRC ipython :session :exports both  
planets.groupby('method')['orbital_period'].median()
#+END_SRC

#+RESULTS:
#+begin_example
method
Astrometry                         631.180000
Eclipse Timing Variations         4343.500000
Imaging                          27500.000000
Microlensing                      3300.000000
Orbital Brightness Modulation        0.342887
Pulsar Timing                       66.541900
Pulsation Timing Variations       1170.000000
Radial Velocity                    360.200000
Transit                              5.714932
Transit Timing Variations           57.011000
Name: orbital_period, dtype: float64
#+end_example

#+BEGIN_SRC ipython :session :results output raw :exports both  
for (method, group) in planets.groupby('method'):
    print("{0:30s} shape={1}".format(method, group.shape))
#+END_SRC

#+RESULTS:
Astrometry                     shape=(2, 6)
Eclipse Timing Variations      shape=(9, 6)
Imaging                        shape=(38, 6)
Microlensing                   shape=(23, 6)
Orbital Brightness Modulation  shape=(3, 6)
Pulsar Timing                  shape=(5, 6)
Pulsation Timing Variations    shape=(1, 6)
Radial Velocity                shape=(553, 6)
Transit                        shape=(397, 6)
Transit Timing Variations      shape=(4, 6)
Astrometry                     shape=(2, 6)
Eclipse Timing Variations      shape=(9, 6)
Imaging                        shape=(38, 6)
Microlensing                   shape=(23, 6)
Orbital Brightness Modulation  shape=(3, 6)
Pulsar Timing                  shape=(5, 6)
Pulsation Timing Variations    shape=(1, 6)
Radial Velocity                shape=(553, 6)
Transit                        shape=(397, 6)
Transit Timing Variations      shape=(4, 6)

** Dispatch methods

#+BEGIN_SRC ipython :session :exports both  
planets.groupby('method')['year'].describe().unstack()
#+END_SRC

#+RESULTS:
#+begin_example
                               count         mean       std     min      25%  \
method                                                                         
Astrometry                       2.0  2011.500000  2.121320  2010.0  2010.75   
Eclipse Timing Variations        9.0  2010.000000  1.414214  2008.0  2009.00   
Imaging                         38.0  2009.131579  2.781901  2004.0  2008.00   
Microlensing                    23.0  2009.782609  2.859697  2004.0  2008.00   
Orbital Brightness Modulation    3.0  2011.666667  1.154701  2011.0  2011.00   
Pulsar Timing                    5.0  1998.400000  8.384510  1992.0  1992.00   
Pulsation Timing Variations      1.0  2007.000000       NaN  2007.0  2007.00   
Radial Velocity                553.0  2007.518987  4.249052  1989.0  2005.00   
Transit                        397.0  2011.236776  2.077867  2002.0  2010.00   
Transit Timing Variations        4.0  2012.500000  1.290994  2011.0  2011.75   

                                  50%      75%     max  
method                                                  
Astrometry                     2011.5  2012.25  2013.0  
Eclipse Timing Variations      2010.0  2011.00  2012.0  
Imaging                        2009.0  2011.00  2013.0  
Microlensing                   2010.0  2012.00  2013.0  
Orbital Brightness Modulation  2011.0  2012.00  2013.0  
Pulsar Timing                  1994.0  2003.00  2011.0  
Pulsation Timing Variations    2007.0  2007.00  2007.0  
Radial Velocity                2009.0  2011.00  2014.0  
Transit                        2012.0  2013.00  2014.0  
Transit Timing Variations      2012.5  2013.25  2014.0  
#+end_example

** Aggregate, filter, transform, apply

#+BEGIN_SRC ipython :session :results output raw :exports both  
rng = np.random.RandomState(0)
df = pd.DataFrame({'key': ['A', 'B', 'C', 'A', 'B', 'C'],
                   'data1': range(6),
                   'data2': rng.randint(0, 10, 6)},
                   columns = ['key', 'data1', 'data2'])
print(tabulate(df, headers="keys", tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
|   | key | data1 | data2 |
|---+-----+-------+-------|
| 0 | A   |     0 |     5 |
| 1 | B   |     1 |     0 |
| 2 | C   |     2 |     3 |
| 3 | A   |     3 |     3 |
| 4 | B   |     4 |     7 |
| 5 | C   |     5 |     9 |

#+BEGIN_SRC ipython :session :results output raw :exports both  

print(tabulate(df.groupby('key').aggregate(['min', np.median, max]), headers="keys", tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
| key | ('data1', 'min') | ('data1', 'median') | ('data1', 'max') | ('data2', 'min') | ('data2', 'median') | ('data2', 'max') |
|-----+------------------+---------------------+------------------+------------------+---------------------+------------------|
| A   |                0 |                 1.5 |                3 |                3 |                   4 |                5 |
| B   |                1 |                 2.5 |                4 |                0 |                 3.5 |                7 |
| C   |                2 |                 3.5 |                5 |                3 |                   6 |                9 |

#+BEGIN_SRC ipython :session :results output raw :exports both  

print(tabulate(df.groupby('key').aggregate({'data1': 'min',
                             'data2': 'max'}), headers="keys", tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
| key | data1 | data2 |
|-----+-------+-------|
| A   |     0 |     5 |
| B   |     1 |     7 |
| C   |     2 |     9 |

** Filtering


#+BEGIN_SRC ipython :session :results output raw :exports both  
def filter_func(x):
    return x['data2'].std() > 4

display('df', "df.groupby('key').std()", "df.groupby('key').filter(filter_func)")


print(tabulate(df, headers="keys", tablefmt="orgtbl") + "\n")


print(tabulate(df.groupby('key').std(), headers="keys", tablefmt="orgtbl") + "\n")


print(tabulate(df.groupby('key').filter(filter_func), headers="keys", tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
|   | key | data1 | data2 |
|---+-----+-------+-------|
| 0 | A   |     0 |     5 |
| 1 | B   |     1 |     0 |
| 2 | C   |     2 |     3 |
| 3 | A   |     3 |     3 |
| 4 | B   |     4 |     7 |
| 5 | C   |     5 |     9 |

| key   |   data1 |   data2 |
|-------+---------+---------|
| A     | 2.12132 | 1.41421 |
| B     | 2.12132 | 4.94975 |
| C     | 2.12132 | 4.24264 |

|    | key   |   data1 |   data2 |
|----+-------+---------+---------|
|  1 | B     |       1 |       0 |
|  2 | C     |       2 |       3 |
|  4 | B     |       4 |       7 |
|  5 | C     |       5 |       9 |

| key   |   data1 |   data2 |
|-------+---------+---------|
| A     | 2.12132 | 1.41421 |
| B     | 2.12132 | 4.94975 |
| C     | 2.12132 | 4.24264 |

|    | key   |   data1 |   data2 |
|----+-------+---------+---------|
|  1 | B     |       1 |       0 |
|  2 | C     |       2 |       3 |
|  4 | B     |       4 |       7 |
|  5 | C     |       5 |       9 |

| key   |   data1 |   data2 |
|-------+---------+---------|
| A     | 2.12132 | 1.41421 |
| B     | 2.12132 | 4.94975 |
| C     | 2.12132 | 4.24264 |

|    | key   |   data1 |   data2 |
|----+-------+---------+---------|
|  1 | B     |       1 |       0 |
|  2 | C     |       2 |       3 |
|  4 | B     |       4 |       7 |
|  5 | C     |       5 |       9 |



#+BEGIN_SRC ipython :session :results output raw :exports both  

print(tabulate(df.groupby('key').transform(lambda x: x - x.mean()), headers="keys", tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
|   | data1 | data2 |
|---+-------+-------|
| 0 |  -1.5 |     1 |
| 1 |  -1.5 |  -3.5 |
| 2 |  -1.5 |    -3 |
| 3 |   1.5 |    -1 |
| 4 |   1.5 |   3.5 |
| 5 |   1.5 |     3 |


