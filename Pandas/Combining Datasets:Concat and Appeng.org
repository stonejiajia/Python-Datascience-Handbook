#+TITLE:Combining Datasets: Concat and Append
* Combining Datasets: Concat and Append

#+BEGIN_SRC ipython :session :exports both  :results output raw
  import matplotlib.pyplot as plt
  %matplotlib inline
  import pandas as pd
  import numpy as np
  import seaborn as sns
  from tabulate import tabulate

  def make_df(cols, ind):
      """Quickly make a DataFrame"""
      data = {c: [str(c) + str(i) for i in ind]
              for c in cols}
      return pd.DataFrame(data, ind)

  a = make_df('ABC', range(3))
  
  print(tabulate(a, headers="keys", tablefmt="orgtbl"))
#+END_SRC

#+RESULTS:
|   | A  | B  | C  |
|---+----+----+----|
| 0 | A0 | B0 | C0 |
| 1 | A1 | B1 | C1 |
| 2 | A2 | B2 | C2 |


#+BEGIN_SRC ipython :session :exports both  
class display(object):
    """Display HTML representation of multiple objects"""
    template = """<div style="float: left; padding: 10px;">
    <p style='font-family:"Courier New", Courier, monospace'>{0}</p>{1}
    </div>"""
    def __init__(self, *args):
        self.args = args
        
    def _repr_html_(self):
        return '\n'.join(self.template.format(a, eval(a)._repr_html_())
                         for a in self.args)
    
    def __repr__(self):
        return '\n\n'.join(a + '\n' + repr(eval(a))
                           for a in self.args)
#+END_SRC

#+RESULTS:

#+BEGIN_SRC ipython :session :exports both  
  x = [1, 2, 3]
  y = [4, 5, 6]
  z = [7, 8, 9]
  np.concatenate([x, y, z])
#+END_SRC

#+RESULTS:
: array([1, 2, 3, 4, 5, 6, 7, 8, 9])

#+BEGIN_SRC ipython :session :exports both  
x = [[1, 2],
     [3, 4]]
np.concatenate([x, x], axis=0)
#+END_SRC

#+RESULTS:
: array([[1, 2],
:        [3, 4],
:        [1, 2],
:        [3, 4]])

#+BEGIN_SRC ipython :session :exports both  
  x = [[1, 2],
       [3, 4]]
  np.concatenate([x, x], axis=1)
#+END_SRC

#+RESULTS:
: array([[1, 2, 1, 2],
:        [3, 4, 3, 4]])


* Simple Concatenation with pd.concat

#+BEGIN_SRC ipython :session :exports both  
  ser1 = pd.Series(['A', 'B', 'c'], index=[1, 2, 3])
  ser2 = pd.Series(['D', 'E', 'F'], index=[4, 5, 6])
  pd.concat([ser1, ser2])
#+END_SRC

#+RESULTS:
: 1    A
: 2    B
: 3    c
: 4    D
: 5    E
: 6    F
: dtype: object

#+BEGIN_SRC ipython :session :exports both  
df1 = make_df('AB', [1, 2])
df2 = make_df('AB', [3, 4])
display('df1', 'df2', 'pd.concat([df1, df2])')


#+END_SRC

#+RESULTS:
#+begin_example
df1
    A   B
1  A1  B1
2  A2  B2

df2
    A   B
3  A3  B3
4  A4  B4

pd.concat([df1, df2])
    A   B
1  A1  B1
2  A2  B2
3  A3  B3
4  A4  B4
#+end_example


#+BEGIN_SRC ipython :session :exports both  
  df3 = make_df('AB', [0,1])
  df4 = make_df('CD', [0,1])

  display('df3', 'df4', "pd.concat([df3, df4], axis='col')")
#+END_SRC

#+RESULTS:
#+begin_example
df3
    A   B
0  A0  B0
1  A1  B1

df4
    C   D
0  C0  D0
1  C1  D1

pd.concat([df3, df4], axis='col')
    A   B   C   D
0  A0  B0  C0  D0
1  A1  B1  C1  D1
#+end_example

#+BEGIN_SRC ipython :session :exports both  
x = make_df('AB', [0, 1])
y = make_df('AB', [2, 3])
y.index = x.index  # make duplicate indices!
display('x', 'y', 'pd.concat([x, y])')
#+END_SRC

#+RESULTS:
#+begin_example
x
    A   B
0  A0  B0
1  A1  B1

y
    A   B
0  A2  B2
1  A3  B3

pd.concat([x, y])
    A   B
0  A0  B0
1  A1  B1
0  A2  B2
1  A3  B3
#+end_example

** Catching the repeats as error

#+BEGIN_SRC ipython :session :exports both  
try:
    pd.concat([x, y], verify_integrity=True)
except ValueError as e:
    print("ValueError:", e)
#+END_SRC

#+RESULTS:

** Ignoring the index

#+BEGIN_SRC ipython :session :exports both  
  display('x', 'y', 'pd.concat([x, y], ignore_index=True)')
#+END_SRC

#+RESULTS:
#+begin_example
x
    A   B
0  A0  B0
1  A1  B1

y
    A   B
0  A2  B2
1  A3  B3

pd.concat([x, y], ignore_index=True)
    A   B
0  A0  B0
1  A1  B1
2  A2  B2
3  A3  B3
#+end_example

#+BEGIN_SRC ipython :session :exports both  
display('x', 'y', "pd.concat([x, y], keys=['x', 'y'])")
#+END_SRC

#+RESULTS:
#+begin_example
x
    A   B
0  A0  B0
1  A1  B1

y
    A   B
0  A2  B2
1  A3  B3

pd.concat([x, y], keys=['x', 'y'])
      A   B
x 0  A0  B0
  1  A1  B1
y 0  A2  B2
  1  A3  B3
#+end_example

#+BEGIN_SRC ipython :session :exports both  
df5 = make_df('ABC', [1, 2])
df6 = make_df('BCD', [3, 4])
display('df5', 'df6', 'pd.concat([df5, df6])')
#+END_SRC

#+RESULTS:
#+begin_example
df5
    A   B   C
1  A1  B1  C1
2  A2  B2  C2

df6
    B   C   D
3  B3  C3  D3
4  B4  C4  D4

pd.concat([df5, df6])
     A   B   C    D
1   A1  B1  C1  NaN
2   A2  B2  C2  NaN
3  NaN  B3  C3   D3
4  NaN  B4  C4   D4
#+end_example

#+BEGIN_SRC ipython :session :exports both  
display('df5', 'df6',
        "pd.concat([df5, df6], join='inner')")
#+END_SRC

#+RESULTS:
#+begin_example
df5
    A   B   C
1  A1  B1  C1
2  A2  B2  C2

df6
    B   C   D
3  B3  C3  D3
4  B4  C4  D4

pd.concat([df5, df6], join='inner')
    B   C
1  B1  C1
2  B2  C2
3  B3  C3
4  B4  C4
#+end_example

#+BEGIN_SRC ipython :session :exports both  

display('df5', 'df6', "pd.concat([df5, df6], join_axes=[df5.columns])")
#+END_SRC

#+RESULTS:
#+begin_example
df5
    A   B   C
1  A1  B1  C1
2  A2  B2  C2

df6
    B   C   D
3  B3  C3  D3
4  B4  C4  D4

pd.concat([df5, df6], join_axes=[df5.columns])
     A   B   C
1   A1  B1  C1
2   A2  B2  C2
3  NaN  B3  C3
4  NaN  B4  C4
#+end_example

** Append Method
#+BEGIN_SRC ipython :session :exports both  
display('df1', 'df2', 'df1.append(df2)')
#+END_SRC

#+RESULTS:
#+begin_example
df1
    A   B
1  A1  B1
2  A2  B2

df2
    A   B
3  A3  B3
4  A4  B4

df1.append(df2)
    A   B
1  A1  B1
2  A2  B2
3  A3  B3
4  A4  B4
#+end_example

